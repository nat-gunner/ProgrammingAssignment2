3+4
3 + 4
5 * 5
add2 <- function(x , y){
x + y
}
3,5
add2(3,5)
aboveN <- function(x,n){
use <- x > n
x[use]
}
above10(9)
above10 <- function(x){
use <- x >10
x[use]
}
above10(9)
above10(11)
aboveN()
aboveN(14,15)
aboveN(14,12)
x <- 1:20
aboveN(x, 12)
aboveN(x)
aboveN <- function(x,n=10){
use <- x > n
x[use]
}
aboveN(x)
cube <- function(x,y){
x^3
}
cube(3)
cube <- function(x,n){
x^3
}
cube(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
library(datasets)
data(iris)
?iris
head(iris)
s <- split(iris, iris$Sepal.Length)
head(s)
s <- split(iris, iris$Species)
head(s)
sapply(s, function(x) colMeans([,"Sepal.Length"]))
sapply(s, function(x) colMeans(x[,"Sepal.Length"]))
sapply(s, function(x) colMeans(x[,c("Sepal.Length")]))
sapply(s, function(x) colMeans(x[,c("Sepal.Length", "Sepal.Width")]))
head(iris)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
v <- apply(iris[, 1:4], 2, mean)
$v
?v
??v
atrv
atr(v)
class(v)
ls(v)
str(v)
is.vector(v)
is.matrix(v)
is.list(v)
data(mtcars)
?mtcars
head(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
82.63636 - 122.28571
122.28571 - 82.63636
debug(ls)
ls
ls()
q()
exit
q
q
stop()
browser(); stop()
exit
exit()
Q()
q()
debug(Q)
q
with(mtcars, tapply(hp, cyl, mean))
209.21429-82.63636
sapply(split(mtcars$mpg, mtcars$cyl), mean)
getwd()
setwd("/Users/Kevin/Documents/Github Clones/ProgrammingAssignment2")
source("cachematrix.R")
amatrix <- matrix(c(1, 2, 3, 4), nrow = 2,  ncol = 2)
makeCacheMatrix(amatrix)
cacheSolve(amatrix)
cacheSolve(makeCacheMatrix(amatrix))
source("cachematrix.R")
amatrix <- matrix(c(1, 2, 3, 4), nrow = 2,  ncol = 2)
cacheSolve(makeCacheMatrix(amatrix))
source("cachematrix.R")
amatrix <- matrix(c(1, 2, 3, 4), nrow = 2,  ncol = 2)
cacheSolve(makeCacheMatrix(amatrix))
source("cachematrix.R")
source("cachematrix.R")
amatrix <- matrix(c(1, 2, 3, 4), nrow = 2,  ncol = 2)
cacheSolve(makeCacheMatrix(amatrix))
print(inv)
print(x)
cacheSolve(makeCacheMatrix(amatrix))
source("cachematrix.R")
amatrix <- matrix(c(1, 2, 3, 4), nrow = 2,  ncol = 2)
cacheSolve(makeCacheMatrix(amatrix))
cacheSolve(makeCacheMatrix(amatrix))
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <- c(1, 2, 3)
mean(x)
makeVector(x)
cachemean(x)
cachemean(makeVector(x))
cacheSolve(makeCacheMatrix(amatrix))
cacheSolve(makeCacheMatrix(amatrix))
cacheSolve(inv
)
a <- makeCacheMatrix(amatrix)
cacheSolve(a)
cacheSolve(a)
